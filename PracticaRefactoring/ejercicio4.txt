1) 

- Aplicando refactoring de la linea 16-19.


public class Pedido {
  private Cliente cliente;
  private List<Producto> productos;
  private String formaPago;

  public Pedido(Cliente cliente, List<Producto> productos, String formaPago) {
    if (!"efectivo".equals(formaPago)
        && !"6 cuotas".equals(formaPago)
        && !"12 cuotas".equals(formaPago)) {
      throw new Error("Forma de pago incorrecta");
    }
    this.cliente = cliente;
    this.productos = productos;
    this.formaPago = formaPago;
  }

  public double getCostoTotal() {
    double costoProductos = 0;
    costoProductos = this.productos.stream().mapToDouble(producto -> producto.getPrecio()).sum();
    

    double extraFormaPago = 0;
    if ("efectivo".equals(this.formaPago)) {
      extraFormaPago = 0;
    } else if ("6 cuotas".equals(this.formaPago)) {
      extraFormaPago = costoProductos * 0.2;
    } else if ("12 cuotas".equals(this.formaPago)) {
      extraFormaPago = costoProductos * 0.5;
    }

    int añosDesdeFechaAlta = Period.between(this.cliente.getFechaAlta(), LocalDate.now()).getYears();

    // Aplicar descuento del 10% si el cliente tiene más de 5 años de antigüedad
    if (añosDesdeFechaAlta > 5) {
      return (costoProductos + extraFormaPago) * 0.9;
    }

    return costoProductos + extraFormaPago;
  }
}

public class Cliente {
  private LocalDate fechaAlta;

  public LocalDate getFechaAlta() {
    return this.fechaAlta;
  }
}

public class Producto {
  private double precio;

  public double getPrecio() {
    return this.precio;
  }
}


- Aplicando refactoring a las lineas 21-27.


public class Pedido {
  private Cliente cliente;
  private List<Producto> productos;
  private FormaPago formaPago;

  public Pedido(Cliente cliente, List<Producto> productos, FormaPago formaPago) {
    if (!formaPago.getFormaPago().equals(formaPago)
        && !formaPago.getFormaPago().equals(formaPago)
        && !formaPago.getFormaPago().equals(formaPago)) {
      throw new Error("Forma de pago incorrecta");
    }
    this.cliente = cliente;
    this.productos = productos;
    this.formaPago = formaPago;
  }

  public double getCostoTotal() {
    double costoProductos = 0;
    costoProductos = this.productos.stream().mapToDouble(producto -> producto.getPrecio()).sum();
    

    double extraFormaPago = 0;
    extraFormaPago = this.formaPago.calcularExtra(costoProductos);

    int añosDesdeFechaAlta = Period.between(this.cliente.getFechaAlta(), LocalDate.now()).getYears();

    // Aplicar descuento del 10% si el cliente tiene más de 5 años de antigüedad
    if (añosDesdeFechaAlta > 5) {
      return (costoProductos + extraFormaPago) * 0.9;
    }

    return costoProductos + extraFormaPago;
  }
}

public class FormaPago {
    private String formaPago;

    public FormaPago (String formaPago){
        this.formaPago = formaPago;
    }

    public abstract double calcularExtra(Double costoProductos);
}

public class Efectivo extends FormaPago{
    public Efectivo (String formaPago){
        super(formaPago);
    }

    public double calcularExtra(Double costoProductos){
        return 0;
    }
    public String getFormaPago(){
        return this.formaPago;
    }
}

public class SeisCuotas extends FormaPago{
    public SeisCuotas (String formaPago){
        super(formaPago);
    }

    public double calcularExtra(Double costoProductos){
        return costoProductos * 0.2;
    }

    public String getFormaPago(){
        return this.formaPago;
    }
}

public class doceCuotas extends FormaPago{
    public doceCuotas (String formaPago){
        super(formaPago);
    }

    public double calcularExtra(Double costoProductos){
        return costoProductos * 0.5;
    }

    public String getFormaPago(){
        return this.formaPago;
    }
}

public class Cliente {
  private LocalDate fechaAlta;

  public LocalDate getFechaAlta() {
    return this.fechaAlta;
  }
}

public class Producto {
  private double precio;

  public double getPrecio() {
    return this.precio;
  }
}


- Aplicando refactoring a la linea 28.

public class Pedido {
  private Cliente cliente;
  private List<Producto> productos;
  private String formaPago;

  public Pedido(Cliente cliente, List<Producto> productos, String formaPago) {
    if (!"efectivo".equals(formaPago)
        && !"6 cuotas".equals(formaPago)
        && !"12 cuotas".equals(formaPago)) {
      throw new Error("Forma de pago incorrecta");
    }
    this.cliente = cliente;
    this.productos = productos;
    this.formaPago = formaPago;
  }

  public double getCostoTotal() {
    double costoProductos = 0;
    costoProductos = this.productos.stream().mapToDouble(producto -> producto.getPrecio()).sum();
    

    double extraFormaPago = 0;
    if ("efectivo".equals(this.formaPago)) {
      extraFormaPago = 0;
    } else if ("6 cuotas".equals(this.formaPago)) {
      extraFormaPago = costoProductos * 0.2;
    } else if ("12 cuotas".equals(this.formaPago)) {
      extraFormaPago = costoProductos * 0.5;
    }

    int añosDesdeFechaAlta = Period.between(this.cliente.getFechaAlta(), LocalDate.now()).getYears();

    // Aplicar descuento del 10% si el cliente tiene más de 5 años de antigüedad
    if (añosDesdeFechaAlta > 5) {
      return (costoProductos + extraFormaPago) * 0.9;
    }

    return costoProductos + extraFormaPago;
  }
}

public class Cliente {
  private LocalDate fechaAlta;

  public LocalDate getFechaAlta() {
    return this.fechaAlta;
  }
}

public class Producto {
  private double precio;

  public double getPrecio() {
    return this.precio;
  }
}


- Aplicando refactoring a las lineas 21-27.


public class Pedido {
  private Cliente cliente;
  private List<Producto> productos;
  private FormaPago formaPago;

  public Pedido(Cliente cliente, List<Producto> productos, FormaPago formaPago) {
    if (!formaPago.getFormaPago().equals(formaPago)
        && !formaPago.getFormaPago().equals(formaPago)
        && !formaPago.getFormaPago().equals(formaPago)) {
      throw new Error("Forma de pago incorrecta");
    }
    this.cliente = cliente;
    this.productos = productos;
    this.formaPago = formaPago;
  }

  public double getCostoTotal() {
    double costoProductos = 0;
    costoProductos = this.productos.stream().mapToDouble(producto -> producto.getPrecio()).sum();
    

    double extraFormaPago = 0;
    extraFormaPago = this.formaPago.calcularExtra(costoProductos);

    // Aplicar descuento del 10% si el cliente tiene más de 5 años de antigüedad
    if (añosDesdeFechaAlta > 5) {
      return (costoProductos + extraFormaPago) * 0.9;
    }

    return costoProductos + extraFormaPago;
  }
}

public class FormaPago {
    private String formaPago;

    public FormaPago (String formaPago){
        this.formaPago = formaPago;
    }

    public abstract double calcularExtra(Double costoProductos);
}

public class Efectivo extends FormaPago{
    public Efectivo (String formaPago){
        super(formaPago);
    }

    public double calcularExtra(Double costoProductos){
        return 0;
    }
    public String getFormaPago(){
        return this.formaPago;
    }
}

public class SeisCuotas extends FormaPago{
    public SeisCuotas (String formaPago){
        super(formaPago);
    }

    public double calcularExtra(Double costoProductos){
        return costoProductos * 0.2;
    }

    public String getFormaPago(){
        return this.formaPago;
    }
}

public class doceCuotas extends FormaPago{
    public doceCuotas (String formaPago){
        super(formaPago);
    }

    public double calcularExtra(Double costoProductos){
        return costoProductos * 0.5;
    }

    public String getFormaPago(){
        return this.formaPago;
    }
}

public class Cliente {
  private LocalDate fechaAlta;

  public LocalDate getFechaAlta() {
    return this.fechaAlta;
  }

  public boolean antiguedadMayorACinco (){
    return Period.between(this.fechaAlta(), LocalDate.now()).getYears() > 5;
  }
}

public class Producto {
  private double precio;

  public double getPrecio() {
    return this.precio;
  }
}



FALTA AJUSTAR ANTEULTIMO Y ULTIMO PUNTO. 